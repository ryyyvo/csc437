### Get all images
# This is a comment
GET http://localhost:3000/api/images

### A second example.  Each request must be delimited by a triple hash
POST http://localhost:3000/api/test
Content-Type: application/json # Content-Type header is a must if you're sending JSON
# Request body separated from headers by newline

{ "a": 1, "b": 2 }

### search images
GET http://localhost:3000/api/images/search?q=Huskies

### update image name
PUT http://localhost:3000/api/images/6837eb83b163fbc32ec9785c
Content-Type: application/json

{
  "name": "Siberian Huskies Resting"
}

### ERROR TEST 1: Invalid ObjectId
PUT http://localhost:3000/api/images/invalid-id
Content-Type: application/json

{
  "name": "This should fail with 404"
}

### ERROR TEST 2: Missing name field
PUT http://localhost:3000/api/images/6837eb83b163fbc32ec9785c
Content-Type: application/json

{
  "title": "This should fail with 400 because we used title instead of name"
}

### ERROR TEST 3: Name too long
PUT http://localhost:3000/api/images/6837eb83b163fbc32ec9785c
Content-Type: application/json

{
  "name": "This is an excessively long image name that exceeds the 100 character limit we've set. It's really, really, really, really, really, really, really, really, really long!"
}

### New user registration - SUCCESS
POST http://localhost:3000/auth/register
Content-Type: application/json

{ "username": "testuser", "password": "password" }

### User registration - BAD REQUEST (missing username)
POST http://localhost:3000/auth/register
Content-Type: application/json

{ "password": "password" }

### User registration - BAD REQUEST (missing password)
POST http://localhost:3000/auth/register
Content-Type: application/json

{ "username": "testuser2" }

### User registration - CONFLICT (username already taken)
POST http://localhost:3000/auth/register
Content-Type: application/json

{ "username": "testuser", "password": "differentpassword" }

### Another successful registration
POST http://localhost:3000/auth/register
Content-Type: application/json

{ "username": "alice", "password": "password123" }

### Test password verification - Correct password
POST http://localhost:3000/auth/login
Content-Type: application/json

{ "username": "testuser", "password": "password" }

### Test password verification - Wrong password
POST http://localhost:3000/auth/login
Content-Type: application/json

{ "username": "testuser", "password": "wrongpassword" }

### Test password verification - Nonexistent user
POST http://localhost:3000/auth/login
Content-Type: application/json

{ "username": "nonexistentuser", "password": "password" }

### Test password verification - Case sensitive username
POST http://localhost:3000/auth/login
Content-Type: application/json

{ "username": "TestUser", "password": "password" }

### Test password verification - Empty password
POST http://localhost:3000/auth/login
Content-Type: application/json

{ "username": "testuser", "password": "" }

### User login with JWT token - SUCCESS
POST http://localhost:3000/auth/login
Content-Type: application/json

{ "username": "testuser", "password": "password" }

### User login with JWT - Another user
POST http://localhost:3000/auth/login
Content-Type: application/json

{ "username": "alice", "password": "password123" }

### OWNERSHIP TESTS

### Register a user with same username as image author
POST http://localhost:3000/auth/register
Content-Type: application/json

{ "username": "chunkylover23", "password": "password" }

### Login as chunkylover23 to get token
POST http://localhost:3000/auth/login
Content-Type: application/json

{ "username": "chunkylover23", "password": "password" }

### Update image as owner - SHOULD WORK
### Replace YOUR_JWT_TOKEN_HERE with token from chunkylover23 login
PUT http://localhost:3000/api/images/6837eb83b163fbc32ec9785c
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNodW5reWxvdmVyMjMiLCJpYXQiOjE3NDg5OTQyNTMsImV4cCI6MTc0OTA4MDY1M30.3ALPwSkFtdmWp3g9BG7u_3Pul15t77aWA0SzFwqqPFk

{
  "name": "Updated by Owner"
}

### Login as different user
POST http://localhost:3000/auth/login
Content-Type: application/json

{ "username": "testuser", "password": "password" }

### Try to update image as non-owner - SHOULD FAIL (403 Forbidden)
### Replace YOUR_JWT_TOKEN_HERE with token from testuser login
PUT http://localhost:3000/api/images/6837eb83b163fbc32ec9785c
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiaWF0IjoxNzQ4OTk0Mjk4LCJleHAiOjE3NDkwODA2OTh9.vNY49ujQOuRekiHDVY4KZoreCpDQUu1ruImJtTcrQ48

{
  "name": "Trying to update someone else's image"
}

### Try to update without token - SHOULD FAIL (401 Unauthorized)
PUT http://localhost:3000/api/images/6837eb83b163fbc32ec9785c
Content-Type: application/json

{
  "name": "No token provided"
}

###